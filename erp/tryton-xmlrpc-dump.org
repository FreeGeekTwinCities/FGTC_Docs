* Models
** model.account.account.create_chart_account.account.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.create_chart_account.account.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.create_chart_account.account.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.template-account.tax.template.search  signatures not supported
** model.account.account.template-account.tax.template.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.account.template-account.tax.template.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.account.template-account.tax.template.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.account.template-account.tax.template.create  signatures not supported
** model.account.account.template-account.tax.template.write  signatures not supported
** model.account.account.template-account.tax.template.read  signatures not supported
** model.account.account.template-account.tax.template.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.account.template-account.tax.template.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.account.template-account.tax.template.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.template-account.tax.template.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.template-account.tax.template.delete  signatures not supported
** model.ir.translation.update.init.get_language  signatures not supported
** model.ir.translation.update.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.translation.update.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.translation.update.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.print_general_ledger.init.on_change_fiscalyear  signatures not supported
** model.account.account.print_general_ledger.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.print_general_ledger.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.print_general_ledger.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.search  signatures not supported
** model.account.account.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.account.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.account.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.account.create  signatures not supported
** model.account.account.write  signatures not supported
** model.account.account.read  signatures not supported
** model.account.account.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.account.copy  signatures not supported
** model.account.account.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.delete  signatures not supported
** model.ir.translation.set_report.start.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.translation.set_report.start.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.translation.set_report.start.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.wizard_size.search  signatures not supported
** model.ir.action.wizard_size.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.action.wizard_size.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.action.wizard_size.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.action.wizard_size.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.action.wizard_size.create  signatures not supported
** model.ir.action.wizard_size.write  signatures not supported
** model.ir.action.wizard_size.read  signatures not supported
** model.ir.action.wizard_size.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.action.wizard_size.set_size Set size for wizard dialog.
:param cursor: the database cursor
:param user: the user id
:param wizard: the wizard name
:param model: the model name
:param width: the width
:param height: the height
:param context: the context signatures not supported
** model.ir.action.wizard_size.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.action.wizard_size.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.action.wizard_size.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.wizard_size.delete  signatures not supported
** model.ir.action.search  signatures not supported
** model.ir.action.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.action.get_action_id  signatures not supported
** model.ir.action.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.action.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.action.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.action.create  signatures not supported
** model.ir.action.write  signatures not supported
** model.ir.action.read  signatures not supported
** model.ir.action.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.action.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.action.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.action.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.delete  signatures not supported
** model.account.move.search  signatures not supported
** model.account.move.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.move.button_draft  signatures not supported
** model.account.move.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.move.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.move.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.move.create  signatures not supported
** model.account.move.write  signatures not supported
** model.account.move.read  signatures not supported
** model.account.move.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.move.on_change_with_date  signatures not supported
** model.account.move.button_post  signatures not supported
** model.account.move.copy  signatures not supported
** model.account.move.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.move.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.move.delete  signatures not supported
** model.account.account.open_third_party_balance.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.open_third_party_balance.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.open_third_party_balance.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.url.search  signatures not supported
** model.ir.action.url.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.action.url.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.action.url.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.action.url.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.action.url.create  signatures not supported
** model.ir.action.url.write  signatures not supported
** model.ir.action.url.read  signatures not supported
** model.ir.action.url.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.action.url.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.action.url.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.action.url.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.url.delete  signatures not supported
** model.party.check_vies.no_check.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.party.check_vies.no_check.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.party.check_vies.no_check.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.journal.type.search  signatures not supported
** model.account.journal.type.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.journal.type.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.journal.type.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.journal.type.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.journal.type.create  signatures not supported
** model.account.journal.type.write  signatures not supported
** model.account.journal.type.read  signatures not supported
** model.account.journal.type.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.journal.type.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.journal.type.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.journal.type.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.journal.type.delete  signatures not supported
** model.ir.default.search  signatures not supported
** model.ir.default.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.default.get_default  signatures not supported
** model.ir.default.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.default.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.default.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.default.create  signatures not supported
** model.ir.default.reset_default  signatures not supported
** model.ir.default.write  signatures not supported
** model.ir.default.read  signatures not supported
** model.ir.default.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.default.set_default  signatures not supported
** model.ir.default.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.default.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.default.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.default.delete  signatures not supported
** model.account.account.print_trial_balance.init.on_change_fiscalyear  signatures not supported
** model.account.account.print_trial_balance.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.print_trial_balance.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.print_trial_balance.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.sequence.search  signatures not supported
** model.ir.sequence.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.sequence.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.sequence.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.sequence.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.sequence.create  signatures not supported
** model.ir.sequence.write  signatures not supported
** model.ir.sequence.read  signatures not supported
** model.ir.sequence.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.sequence.code_get  signatures not supported
** model.ir.sequence.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.sequence.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.sequence.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.sequence.delete  signatures not supported
** model.account.tax.open_chart_code.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.open_chart_code.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.open_chart_code.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.party.contact_mechanism.delete  signatures not supported
** model.party.contact_mechanism.search  signatures not supported
** model.party.contact_mechanism.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.party.contact_mechanism.on_change_other_value  signatures not supported
** model.party.contact_mechanism.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.party.contact_mechanism.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.party.contact_mechanism.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.party.contact_mechanism.on_change_skype  signatures not supported
** model.party.contact_mechanism.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.party.contact_mechanism.write  signatures not supported
** model.party.contact_mechanism.read  signatures not supported
** model.party.contact_mechanism.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.party.contact_mechanism.on_change_value  signatures not supported
** model.party.contact_mechanism.on_change_website  signatures not supported
** model.party.contact_mechanism.create  signatures not supported
** model.party.contact_mechanism.on_change_email  signatures not supported
** model.party.contact_mechanism.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.party.contact_mechanism.on_change_sip  signatures not supported
** model.party.contact_mechanism.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.res.user.get_preferences_fields_view  signatures not supported
** model.res.user.search  signatures not supported
** model.res.user.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.res.user.on_change_main_company  signatures not supported
** model.res.user.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.res.user.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.res.user.timezones  signatures not supported
** model.res.user.create  signatures not supported
** model.res.user.write  signatures not supported
** model.res.user.read  signatures not supported
** model.res.user.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.res.user.get_preferences  signatures not supported
** model.res.user.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.res.user.set_preferences Set user preferences.

:param cursor: the database cursor
:param user_id: the user id
:param values: a dictionary with values
:param old_password: the previous password if password is in values
:param context: the context signatures not supported
** model.res.user.copy  signatures not supported
** model.res.user.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.res.user.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.user.delete  signatures not supported
** model.ir.rule.search  signatures not supported
** model.ir.rule.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.rule.get_operand  signatures not supported
** model.ir.rule.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.rule.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.rule.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.rule.create  signatures not supported
** model.ir.rule.write  signatures not supported
** model.ir.rule.read  signatures not supported
** model.ir.rule.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.rule.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.rule.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.rule.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.rule.delete  signatures not supported
** model.account.move.reconciliation.search  signatures not supported
** model.account.move.reconciliation.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.move.reconciliation.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.move.reconciliation.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.move.reconciliation.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.move.reconciliation.create  signatures not supported
** model.account.move.reconciliation.write  signatures not supported
** model.account.move.reconciliation.read  signatures not supported
** model.account.move.reconciliation.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.move.reconciliation.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.move.reconciliation.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.move.reconciliation.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.move.reconciliation.delete  signatures not supported
** model.ir.action.wizard.search  signatures not supported
** model.ir.action.wizard.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.action.wizard.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.action.wizard.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.action.wizard.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.action.wizard.create  signatures not supported
** model.ir.action.wizard.write  signatures not supported
** model.ir.action.wizard.read  signatures not supported
** model.ir.action.wizard.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.action.wizard.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.action.wizard.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.action.wizard.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.wizard.delete  signatures not supported
** model.account.journal.search  signatures not supported
** model.account.journal.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.journal.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.journal.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.journal.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.journal.create  signatures not supported
** model.account.journal.get_types  signatures not supported
** model.account.journal.write  signatures not supported
** model.account.journal.read  signatures not supported
** model.account.journal.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.journal.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.journal.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.journal.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.journal.delete  signatures not supported
** model.account.account.open_income_statement.init.on_change_fiscalyear  signatures not supported
** model.account.account.open_income_statement.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.open_income_statement.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.open_income_statement.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.translation.set_report.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.translation.set_report.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.translation.set_report.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.workflow.transition-workflow.instance.search  signatures not supported
** model.workflow.transition-workflow.instance.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.workflow.transition-workflow.instance.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.workflow.transition-workflow.instance.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.workflow.transition-workflow.instance.read  signatures not supported
** model.workflow.transition-workflow.instance.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.workflow.transition-workflow.instance.fields_get  signatures not supported
** model.workflow.transition-workflow.instance.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.* model.data.search  signatures not supported
** model.ir.* model.data.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.* model.data.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.* model.data.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.* model.data.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.* model.data.create  signatures not supported
** model.ir.* model.data.write  signatures not supported
** model.ir.* model.data.read  signatures not supported
** model.ir.* model.data.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.* model.data.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.* model.data.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.* model.data.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.* model.data.delete  signatures not supported
** model.ir.translation.search  signatures not supported
** model.ir.translation.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.translation.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.translation.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.translation.get_language  signatures not supported
** model.ir.translation.create  signatures not supported
** model.ir.translation.write  signatures not supported
** model.ir.translation.read  signatures not supported
** model.ir.translation.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.translation.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.translation.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.translation.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.translation.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.translation.delete  signatures not supported
** model.ir.rule.group.search  signatures not supported
** model.ir.rule.group.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.rule.group.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.rule.group.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.rule.group.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.rule.group.create  signatures not supported
** model.ir.rule.group.write  signatures not supported
** model.ir.rule.group.read  signatures not supported
** model.ir.rule.group.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.rule.group.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.rule.group.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.rule.group.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.rule.group.delete  signatures not supported
** model.account.account.type.search  signatures not supported
** model.account.account.type.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.type.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.account.type.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.account.type.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.account.type.create  signatures not supported
** model.account.account.type.write  signatures not supported
** model.account.account.type.read  signatures not supported
** model.account.account.type.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.account.type.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.account.type.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.type.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.type.delete  signatures not supported
** model.account.tax.code.template.search  signatures not supported
** model.account.tax.code.template.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.code.template.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.code.template.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.code.template.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.code.template.create  signatures not supported
** model.account.tax.code.template.write  signatures not supported
** model.account.tax.code.template.read  signatures not supported
** model.account.tax.code.template.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.code.template.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.code.template.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.code.template.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.code.template.delete  signatures not supported
** model.account.account.deferral.search  signatures not supported
** model.account.account.deferral.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.deferral.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.account.deferral.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.account.deferral.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.account.deferral.create  signatures not supported
** model.account.account.deferral.write  signatures not supported
** model.account.account.deferral.read  signatures not supported
** model.account.account.deferral.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.account.deferral.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.account.deferral.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.deferral.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.deferral.delete  signatures not supported
** model.account.fiscalyear.close_fiscalyear.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.fiscalyear.close_fiscalyear.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.fiscalyear.close_fiscalyear.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.request.reference.search  signatures not supported
** model.res.request.reference.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.res.request.reference.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.res.request.reference.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.res.request.reference.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.res.request.reference.create  signatures not supported
** model.res.request.reference.write  signatures not supported
** model.res.request.reference.read  signatures not supported
** model.res.request.reference.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.res.request.reference.links_get  signatures not supported
** model.res.request.reference.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.res.request.reference.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.res.request.reference.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.request.reference.delete  signatures not supported
** model.workflow.transition.search  signatures not supported
** model.workflow.transition.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.workflow.transition.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.workflow.transition.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.workflow.transition.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.workflow.transition.create  signatures not supported
** model.workflow.transition.write  signatures not supported
** model.workflow.transition.read  signatures not supported
** model.workflow.transition.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.workflow.transition.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.workflow.transition.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.workflow.transition.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.workflow.transition.delete  signatures not supported
** model.account.account.open_balance_sheet.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.open_balance_sheet.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.open_balance_sheet.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.company.company.config.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.company.company.config.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.company.company.config.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.journal.view.search  signatures not supported
** model.account.journal.view.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.journal.view.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.journal.view.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.journal.view.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.journal.view.create  signatures not supported
** model.account.journal.view.write  signatures not supported
** model.account.journal.view.read  signatures not supported
** model.account.journal.view.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.journal.view.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.journal.view.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.journal.view.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.journal.view.delete  signatures not supported
** model.ir.* model.access.search  signatures not supported
** model.ir.* model.access.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.* model.access.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.* model.access.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.* model.access.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.* model.access.create  signatures not supported
** model.ir.* model.access.write # Methods to clean the cache on the Check Method. signatures not supported
** model.ir.* model.access.read  signatures not supported
** model.ir.* model.access.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.* model.access.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.* model.access.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.* model.access.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.* model.access.delete  signatures not supported
** model.account.move.print_general_journal.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.move.print_general_journal.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.move.print_general_journal.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.rule.line.search  signatures not supported
** model.account.tax.rule.line.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.rule.line.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.rule.line.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.rule.line.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.rule.line.create  signatures not supported
** model.account.tax.rule.line.write  signatures not supported
** model.account.tax.rule.line.read  signatures not supported
** model.account.tax.rule.line.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.rule.line.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.rule.line.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.rule.line.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.rule.line.delete  signatures not supported
** model.account.account.update_chart_account.start.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.update_chart_account.start.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.update_chart_account.start.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.property.search  signatures not supported
** model.ir.property.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.property.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.property.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.property.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.property.create  signatures not supported
** model.ir.property.write  signatures not supported
** model.ir.property.read  signatures not supported
** model.ir.property.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.property.models_get  signatures not supported
** model.ir.property.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.property.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.property.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.property.delete  signatures not supported
** model.ir.module.module.config_wizard.first.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.module.module.config_wizard.first.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.module.module.config_wizard.first.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.module.module.install_upgrade.start.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.module.module.install_upgrade.start.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.module.module.install_upgrade.start.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.act_window.view.search  signatures not supported
** model.ir.action.act_window.view.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.action.act_window.view.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.action.act_window.view.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.action.act_window.view.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.action.act_window.view.create  signatures not supported
** model.ir.action.act_window.view.write  signatures not supported
** model.ir.action.act_window.view.read  signatures not supported
** model.ir.action.act_window.view.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.action.act_window.view.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.action.act_window.view.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.action.act_window.view.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.act_window.view.delete  signatures not supported
** model.account.tax.code.write  signatures not supported
** model.account.tax.code.search  signatures not supported
** model.account.tax.code.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.code.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.code.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.code.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.code.create  signatures not supported
** model.account.tax.code.on_change_with_currency_digits  signatures not supported
** model.account.tax.code.read  signatures not supported
** model.account.tax.code.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.code.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.code.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.code.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.code.delete  signatures not supported
** model.ir.action.report.search  signatures not supported
** model.ir.action.report.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.action.report.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.action.report.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.action.report.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.action.report.create  signatures not supported
** model.ir.action.report.write  signatures not supported
** model.ir.action.report.read  signatures not supported
** model.ir.action.report.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.action.report.copy  signatures not supported
** model.ir.action.report.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.action.report.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.report.delete  signatures not supported
** model.ir.export.search  signatures not supported
** model.ir.export.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.export.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.export.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.export.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.export.create  signatures not supported
** model.ir.export.write  signatures not supported
** model.ir.export.read  signatures not supported
** model.ir.export.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.export.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.export.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.export.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.export.delete  signatures not supported
** model.ir.module.module.config_wizard.item.search  signatures not supported
** model.ir.module.module.config_wizard.item.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.module.module.config_wizard.item.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.module.module.config_wizard.item.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.module.module.config_wizard.item.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.module.module.config_wizard.item.create  signatures not supported
** model.ir.module.module.config_wizard.item.write  signatures not supported
** model.ir.module.module.config_wizard.item.read  signatures not supported
** model.ir.module.module.config_wizard.item.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.module.module.config_wizard.item.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.module.module.config_wizard.item.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.module.module.config_wizard.item.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.module.module.config_wizard.item.delete  signatures not supported
** model.currency.currency.search  signatures not supported
** model.currency.currency.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.currency.currency.compute Take a currency and an amount
Return the amount to the new currency
Use the rate of the date of the context or the current date signatures not supported
** model.currency.currency.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.currency.currency.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.currency.currency.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.currency.currency.create  signatures not supported
** model.currency.currency.write  signatures not supported
** model.currency.currency.on_change_with_rate  signatures not supported
** model.currency.currency.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.currency.currency.read  signatures not supported
** model.currency.currency.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.currency.currency.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.currency.currency.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.currency.currency.delete  signatures not supported
** model.ir.ui.view.search  signatures not supported
** model.ir.ui.view.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.ui.view.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.ui.view.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.ui.view.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.ui.view.create  signatures not supported
** model.ir.ui.view.write  signatures not supported
** model.ir.ui.view.read  signatures not supported
** model.ir.ui.view.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.ui.view.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.ui.view.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.ui.view.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.ui.view.delete  signatures not supported
** model.account.tax.write  signatures not supported
** model.account.tax.search  signatures not supported
** model.account.tax.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.create  signatures not supported
** model.account.tax.on_change_with_currency_digits  signatures not supported
** model.account.tax.read  signatures not supported
** model.account.tax.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.delete  signatures not supported
** model.ir.* model.field-res.group.search  signatures not supported
** model.ir.* model.field-res.group.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.* model.field-res.group.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.* model.field-res.group.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.* model.field-res.group.create  signatures not supported
** model.ir.* model.field-res.group.write  signatures not supported
** model.ir.* model.field-res.group.read  signatures not supported
** model.ir.* model.field-res.group.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.* model.field-res.group.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.* model.field-res.group.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.* model.field-res.group.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.* model.field-res.group.delete  signatures not supported
** model.workflow.search  signatures not supported
** model.workflow.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.workflow.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.workflow.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.workflow.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.workflow.create  signatures not supported
** model.workflow.write  signatures not supported
** model.workflow.read  signatures not supported
** model.workflow.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.workflow.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.workflow.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.workflow.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.workflow.delete  signatures not supported
** model.account.journal.period.search  signatures not supported
** model.account.journal.period.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.journal.period.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.journal.period.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.journal.period.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.journal.period.create  signatures not supported
** model.account.journal.period.write  signatures not supported
** model.account.journal.period.read  signatures not supported
** model.account.journal.period.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.journal.period.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.journal.period.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.journal.period.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.journal.period.delete  signatures not supported
** model.account.tax.rule.line.template.search  signatures not supported
** model.account.tax.rule.line.template.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.rule.line.template.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.rule.line.template.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.rule.line.template.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.rule.line.template.create  signatures not supported
** model.account.tax.rule.line.template.write  signatures not supported
** model.account.tax.rule.line.template.read  signatures not supported
** model.account.tax.rule.line.template.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.rule.line.template.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.rule.line.template.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.rule.line.template.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.rule.line.template.delete  signatures not supported
** model.account.account.open_chart_account.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.open_chart_account.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.open_chart_account.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.ui.menu.search  signatures not supported
** model.ir.ui.menu.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.ui.menu.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.ui.menu.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.ui.menu.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.ui.menu.create  signatures not supported
** model.ir.ui.menu.write  signatures not supported
** model.ir.ui.menu.read  signatures not supported
** model.ir.ui.menu.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.ui.menu.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.ui.menu.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.ui.menu.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.ui.menu.delete  signatures not supported
** model.account.move.open_journal.ask.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.move.open_journal.ask.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.move.open_journal.ask.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.workflow.trigger.search  signatures not supported
** model.workflow.trigger.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.workflow.trigger.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.workflow.trigger.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.workflow.trigger.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.workflow.trigger.read  signatures not supported
** model.workflow.trigger.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.workflow.trigger.fields_get  signatures not supported
** model.workflow.trigger.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.party.check_vies.check.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.party.check_vies.check.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.party.check_vies.check.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.date.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.date.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.date.today Current date

:param cursor: the database cursor
:param user: the user id
:param context: the context
:return: a current datetime.date signatures not supported
** model.res.request.search  signatures not supported
** model.res.request.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.res.request.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.res.request.on_change_with_number_references  signatures not supported
** model.res.request.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.res.request.create  signatures not supported
** model.res.request.request_close  signatures not supported
** model.res.request.write  signatures not supported
** model.res.request.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.res.request.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.res.request.read  signatures not supported
** model.res.request.request_reply  signatures not supported
** model.res.request.request_get  signatures not supported
** model.res.request.request_send  signatures not supported
** model.res.request.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.res.request.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.res.request.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.request.delete  signatures not supported
** model.ir.lang.search  signatures not supported
** model.ir.lang.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.lang.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.lang.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.lang.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.lang.create  signatures not supported
** model.ir.lang.write  signatures not supported
** model.ir.lang.read  signatures not supported
** model.ir.lang.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.lang.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.lang.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.lang.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.lang.delete  signatures not supported
** model.ir.ui.view_sc.search  signatures not supported
** model.ir.ui.view_sc.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.ui.view_sc.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.ui.view_sc.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.ui.view_sc.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.ui.view_sc.create  signatures not supported
** model.ir.ui.view_sc.get_sc Provide user's shortcuts signatures not supported
** model.ir.ui.view_sc.write  signatures not supported
** model.ir.ui.view_sc.read  signatures not supported
** model.ir.ui.view_sc.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.ui.view_sc.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.ui.view_sc.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.ui.view_sc.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.ui.view_sc.delete  signatures not supported
** model.account.tax.line.write  signatures not supported
** model.account.tax.line.search  signatures not supported
** model.account.tax.line.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.line.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.line.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.line.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.line.create  signatures not supported
** model.account.tax.line.on_change_with_currency_digits  signatures not supported
** model.account.tax.line.read  signatures not supported
** model.account.tax.line.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.line.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.line.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.line.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.line.delete  signatures not supported
** model.account.period.search  signatures not supported
** model.account.period.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.period.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.period.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.period.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.period.create  signatures not supported
** model.account.period.write  signatures not supported
** model.account.period.read  signatures not supported
** model.account.period.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.period.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.period.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.period.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.period.delete  signatures not supported
** model.account.move.line.on_change_party  signatures not supported
** model.account.move.line.search  signatures not supported
** model.account.move.line.fields_view_get  signatures not supported
** model.account.move.line.on_change_credit  signatures not supported
** model.account.move.line.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.move.line.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.move.line.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.move.line.create  signatures not supported
** model.account.move.line.copy  signatures not supported
** model.account.move.line.on_change_debit  signatures not supported
** model.account.move.line.write  signatures not supported
** model.account.move.line.read  signatures not supported
** model.account.move.line.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.move.line.on_write  signatures not supported
** model.account.move.line.on_change_account  signatures not supported
** model.account.move.line.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.move.line.default_get  signatures not supported
** model.account.move.line.delete  signatures not supported
** model.ir.ui.menu-res.group.search  signatures not supported
** model.ir.ui.menu-res.group.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.ui.menu-res.group.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.ui.menu-res.group.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.ui.menu-res.group.create  signatures not supported
** model.ir.ui.menu-res.group.write  signatures not supported
** model.ir.ui.menu-res.group.read  signatures not supported
** model.ir.ui.menu-res.group.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.ui.menu-res.group.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.ui.menu-res.group.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.ui.menu-res.group.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.ui.menu-res.group.delete  signatures not supported
** model.ir.module.module.dependency.search  signatures not supported
** model.ir.module.module.dependency.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.module.module.dependency.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.module.module.dependency.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.module.module.dependency.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.module.module.dependency.create  signatures not supported
** model.ir.module.module.dependency.write  signatures not supported
** model.ir.module.module.dependency.read  signatures not supported
** model.ir.module.module.dependency.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.module.module.dependency.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.module.module.dependency.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.module.module.dependency.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.module.module.dependency.delete  signatures not supported
** model.account.account.type.template.search  signatures not supported
** model.account.account.type.template.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.type.template.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.account.type.template.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.account.type.template.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.account.type.template.create  signatures not supported
** model.account.account.type.template.write  signatures not supported
** model.account.account.type.template.read  signatures not supported
** model.account.account.type.template.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.account.type.template.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.account.type.template.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.type.template.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.type.template.delete  signatures not supported
** model.ir.action-res.group.search  signatures not supported
** model.ir.action-res.group.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.action-res.group.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.action-res.group.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.action-res.group.create  signatures not supported
** model.ir.action-res.group.write  signatures not supported
** model.ir.action-res.group.read  signatures not supported
** model.ir.action-res.group.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.action-res.group.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.action-res.group.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.action-res.group.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action-res.group.delete  signatures not supported
** model.account.account.template.search  signatures not supported
** model.account.account.template.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.template.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.account.template.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.account.template.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.account.template.create  signatures not supported
** model.account.account.template.write  signatures not supported
** model.account.account.template.read  signatures not supported
** model.account.account.template.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.account.template.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.account.template.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.template.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.template.delete  signatures not supported
** model.party.address.search  signatures not supported
** model.party.address.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.party.address.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.party.address.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.party.address.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.party.address.create  signatures not supported
** model.party.address.write  signatures not supported
** model.party.address.read  signatures not supported
** model.party.address.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.party.address.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.party.address.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.party.address.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.party.address.delete  signatures not supported
** model.ir.translation.clean.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.translation.clean.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.translation.clean.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.rule.group-res.group.search  signatures not supported
** model.ir.rule.group-res.group.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.rule.group-res.group.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.rule.group-res.group.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.rule.group-res.group.create  signatures not supported
** model.ir.rule.group-res.group.write  signatures not supported
** model.ir.rule.group-res.group.read  signatures not supported
** model.ir.rule.group-res.group.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.rule.group-res.group.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.rule.group-res.group.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.rule.group-res.group.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.rule.group-res.group.delete  signatures not supported
** model.country.subdivision.search  signatures not supported
** model.country.subdivision.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.country.subdivision.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.country.subdivision.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.country.subdivision.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.country.subdivision.create  signatures not supported
** model.country.subdivision.write  signatures not supported
** model.country.subdivision.read  signatures not supported
** model.country.subdivision.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.country.subdivision.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.country.subdivision.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.country.subdivision.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.country.subdivision.delete  signatures not supported
** model.res.user-res.group.search  signatures not supported
** model.res.user-res.group.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.res.user-res.group.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.res.user-res.group.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.res.user-res.group.create  signatures not supported
** model.res.user-res.group.write  signatures not supported
** model.res.user-res.group.read  signatures not supported
** model.res.user-res.group.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.res.user-res.group.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.res.user-res.group.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.res.user-res.group.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.user-res.group.delete  signatures not supported
** model.account.tax.template.search  signatures not supported
** model.account.tax.template.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.template.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.template.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.template.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.template.create  signatures not supported
** model.account.tax.template.write  signatures not supported
** model.account.tax.template.read  signatures not supported
** model.account.tax.template.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.template.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.template.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.template.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.template.delete  signatures not supported
** model.account.tax.rule.search  signatures not supported
** model.account.tax.rule.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.rule.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.rule.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.rule.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.rule.create  signatures not supported
** model.account.tax.rule.write  signatures not supported
** model.account.tax.rule.read  signatures not supported
** model.account.tax.rule.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.rule.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.rule.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.rule.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.rule.delete  signatures not supported
** model.account.fiscalyear-account.move.line.search  signatures not supported
** model.account.fiscalyear-account.move.line.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.fiscalyear-account.move.line.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.fiscalyear-account.move.line.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.fiscalyear-account.move.line.create  signatures not supported
** model.account.fiscalyear-account.move.line.write  signatures not supported
** model.account.fiscalyear-account.move.line.read  signatures not supported
** model.account.fiscalyear-account.move.line.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.fiscalyear-account.move.line.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.fiscalyear-account.move.line.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.fiscalyear-account.move.line.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.fiscalyear-account.move.line.delete  signatures not supported
** model.ir.rule.group-res.user.search  signatures not supported
** model.ir.rule.group-res.user.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.rule.group-res.user.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.rule.group-res.user.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.rule.group-res.user.create  signatures not supported
** model.ir.rule.group-res.user.write  signatures not supported
** model.ir.rule.group-res.user.read  signatures not supported
** model.ir.rule.group-res.user.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.rule.group-res.user.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.rule.group-res.user.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.rule.group-res.user.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.rule.group-res.user.delete  signatures not supported
** model.ir.translation.export.start.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.translation.export.start.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.translation.export.start.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.sequence.type.search  signatures not supported
** model.ir.sequence.type.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.sequence.type.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.sequence.type.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.sequence.type.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.sequence.type.create  signatures not supported
** model.ir.sequence.type.write  signatures not supported
** model.ir.sequence.type.read  signatures not supported
** model.ir.sequence.type.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.sequence.type.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.sequence.type.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.sequence.type.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.sequence.type.delete  signatures not supported
** model.workflow.instance.search  signatures not supported
** model.workflow.instance.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.workflow.instance.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.workflow.instance.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.workflow.instance.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.workflow.instance.read  signatures not supported
** model.workflow.instance.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.workflow.instance.fields_get  signatures not supported
** model.workflow.instance.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.party.party.search  signatures not supported
** model.party.party.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.party.party.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.party.party.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.party.party.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.party.party.create  signatures not supported
** model.party.party.write  signatures not supported
** model.party.party.read  signatures not supported
** model.party.party.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.party.party.copy  signatures not supported
** model.party.party.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.party.party.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.party.party.delete  signatures not supported
** model.ir.translation.clean.start.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.translation.clean.start.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.translation.clean.start.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.workflow.activity.search  signatures not supported
** model.workflow.activity.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.workflow.activity.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.workflow.activity.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.workflow.activity.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.workflow.activity.create  signatures not supported
** model.workflow.activity.write  signatures not supported
** model.workflow.activity.read  signatures not supported
** model.workflow.activity.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.workflow.activity.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.workflow.activity.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.workflow.activity.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.workflow.activity.delete  signatures not supported
** model.ir.module.module.install_upgrade.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.module.module.install_upgrade.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.module.module.install_upgrade.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.cron.search  signatures not supported
** model.ir.cron.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.cron.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.cron.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.cron.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.cron.create  signatures not supported
** model.ir.cron.write  signatures not supported
** model.ir.cron.read  signatures not supported
** model.ir.cron.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.cron.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.cron.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.cron.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.cron.delete  signatures not supported
** model.company.employee.search  signatures not supported
** model.company.employee.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.company.employee.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.company.employee.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.company.employee.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.company.employee.create  signatures not supported
** model.company.employee.write  signatures not supported
** model.company.employee.read  signatures not supported
** model.company.employee.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.company.employee.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.company.employee.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.company.employee.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.company.employee.delete  signatures not supported
** model.account.tax.rule.template.search  signatures not supported
** model.account.tax.rule.template.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.rule.template.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.rule.template.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.rule.template.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.rule.template.create  signatures not supported
** model.account.tax.rule.template.write  signatures not supported
** model.account.tax.rule.template.read  signatures not supported
** model.account.tax.rule.template.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.rule.template.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.rule.template.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.rule.template.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.rule.template.delete  signatures not supported
** model.res.request.history.search  signatures not supported
** model.res.request.history.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.res.request.history.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.res.request.history.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.res.request.history.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.res.request.history.create  signatures not supported
** model.res.request.history.write  signatures not supported
** model.res.request.history.read  signatures not supported
** model.res.request.history.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.res.request.history.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.res.request.history.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.res.request.history.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.request.history.delete  signatures not supported
** model.ir.* model.print_model_graph.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.* model.print_model_graph.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.* model.print_model_graph.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account-account.tax.search  signatures not supported
** model.account.account-account.tax.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.account-account.tax.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.account-account.tax.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.account-account.tax.create  signatures not supported
** model.account.account-account.tax.write  signatures not supported
** model.account.account-account.tax.read  signatures not supported
** model.account.account-account.tax.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.account-account.tax.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.account-account.tax.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account-account.tax.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account-account.tax.delete  signatures not supported
** model.ir.module.module.button_install_cancel  signatures not supported
** model.ir.module.module.search  signatures not supported
** model.ir.module.module.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.module.module.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.module.module.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.module.module.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.module.module.create  signatures not supported
** model.ir.module.module.button_upgrade  signatures not supported
** model.ir.module.module.button_install  signatures not supported
** model.ir.module.module.button_upgrade_cancel  signatures not supported
** model.ir.module.module.write  signatures not supported
** model.ir.module.module.read  signatures not supported
** model.ir.module.module.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.module.module.button_uninstall_cancel  signatures not supported
** model.ir.module.module.button_uninstall  signatures not supported
** model.ir.module.module.on_write  signatures not supported
** model.ir.module.module.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.module.module.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.module.module.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.module.module.delete  signatures not supported
** model.account.account.open_aged_balance.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.open_aged_balance.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.open_aged_balance.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.fiscalyear.search  signatures not supported
** model.account.fiscalyear.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.fiscalyear.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.fiscalyear.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.fiscalyear.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.fiscalyear.create  signatures not supported
** model.account.fiscalyear.reopen Re-open a fiscal year

:param cursor: the database cursor
:param user: the user id
:param fiscalyear_id: the fiscal year id
:param context: the context signatures not supported
** model.account.fiscalyear.write  signatures not supported
** model.account.fiscalyear.read  signatures not supported
** model.account.fiscalyear.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.fiscalyear.create_period Create periods for the fiscal years with month interval signatures not supported
** model.account.fiscalyear.close Close a fiscal year

:param cursor: the database cursor
:param user: the user id
:param fiscalyear_id: the fiscal year id
:param context: the context signatures not supported
** model.account.fiscalyear.create_period_3 Create periods for the fiscal years with 3 months interval signatures not supported
** model.account.fiscalyear.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.fiscalyear.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.fiscalyear.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.fiscalyear.delete  signatures not supported
** model.account.account.update_chart_account.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.update_chart_account.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.update_chart_account.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.user.config.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.res.user.config.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.res.user.config.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.workflow.workitem.search  signatures not supported
** model.workflow.workitem.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.workflow.workitem.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.workflow.workitem.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.workflow.workitem.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.workflow.workitem.read  signatures not supported
** model.workflow.workitem.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.workflow.workitem.fields_get  signatures not supported
** model.workflow.workitem.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.move.unreconcile_lines.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.move.unreconcile_lines.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.move.unreconcile_lines.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.sequence.strict.search  signatures not supported
** model.ir.sequence.strict.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.sequence.strict.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.sequence.strict.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.sequence.strict.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.sequence.strict.create  signatures not supported
** model.ir.sequence.strict.write  signatures not supported
** model.ir.sequence.strict.read  signatures not supported
** model.ir.sequence.strict.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.sequence.strict.code_get  signatures not supported
** model.ir.sequence.strict.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.sequence.strict.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.sequence.strict.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.sequence.strict.delete  signatures not supported
** model.ir.export.line.search  signatures not supported
** model.ir.export.line.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.export.line.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.export.line.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.export.line.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.export.line.create  signatures not supported
** model.ir.export.line.write  signatures not supported
** model.ir.export.line.read  signatures not supported
** model.ir.export.line.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.export.line.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.export.line.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.export.line.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.export.line.delete  signatures not supported
** model.ir.attachment.search  signatures not supported
** model.ir.attachment.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.attachment.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.attachment.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.attachment.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.attachment.create  signatures not supported
** model.ir.attachment.write  signatures not supported
** model.ir.attachment.read  signatures not supported
** model.ir.attachment.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.attachment.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.attachment.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.attachment.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.attachment.delete  signatures not supported
** model.country.country.search  signatures not supported
** model.country.country.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.country.country.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.country.country.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.country.country.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.country.country.create  signatures not supported
** model.country.country.write  signatures not supported
** model.country.country.read  signatures not supported
** model.country.country.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.country.country.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.country.country.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.country.country.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.country.country.delete  signatures not supported
** model.ir.ui.view_tree_width.search  signatures not supported
** model.ir.ui.view_tree_width.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.ui.view_tree_width.set_width Set width for the current user on the * model.
fields is a dictionary with key: field name and value: width. signatures not supported
** model.ir.ui.view_tree_width.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.ui.view_tree_width.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.ui.view_tree_width.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.ui.view_tree_width.create  signatures not supported
** model.ir.ui.view_tree_width.write  signatures not supported
** model.ir.ui.view_tree_width.read  signatures not supported
** model.ir.ui.view_tree_width.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.ui.view_tree_width.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.ui.view_tree_width.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.ui.view_tree_width.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.ui.view_tree_width.delete  signatures not supported
** model.res.group.search  signatures not supported
** model.res.group.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.res.group.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.res.group.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.res.group.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.res.group.create  signatures not supported
** model.res.group.write  signatures not supported
** model.res.group.read  signatures not supported
** model.res.group.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.res.group.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.res.group.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.res.group.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.group.delete  signatures not supported
** model.account.journal.view.column.search  signatures not supported
** model.account.journal.view.column.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.journal.view.column.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.journal.view.column.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.journal.view.column.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.journal.view.column.create  signatures not supported
** model.account.journal.view.column.write  signatures not supported
** model.account.journal.view.column.read  signatures not supported
** model.account.journal.view.column.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.journal.view.column.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.journal.view.column.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.journal.view.column.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.journal.view.column.delete  signatures not supported
** model.res.user.warning.search  signatures not supported
** model.res.user.warning.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.res.user.warning.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.res.user.warning.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.res.user.warning.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.res.user.warning.create  signatures not supported
** model.res.user.warning.write  signatures not supported
** model.res.user.warning.read  signatures not supported
** model.res.user.warning.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.res.user.warning.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.res.user.warning.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.res.user.warning.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.user.warning.delete  signatures not supported
** model.currency.currency.rate.search  signatures not supported
** model.currency.currency.rate.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.currency.currency.rate.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.currency.currency.rate.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.currency.currency.rate.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.currency.currency.rate.create  signatures not supported
** model.currency.currency.rate.write  signatures not supported
** model.currency.currency.rate.read  signatures not supported
** model.currency.currency.rate.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.currency.currency.rate.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.currency.currency.rate.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.currency.currency.rate.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.currency.currency.rate.delete  signatures not supported
** model.ir.cron-company.company.search  signatures not supported
** model.ir.cron-company.company.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.cron-company.company.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.cron-company.company.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.cron-company.company.create  signatures not supported
** model.ir.cron-company.company.write  signatures not supported
** model.ir.cron-company.company.read  signatures not supported
** model.ir.cron-company.company.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.cron-company.company.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.cron-company.company.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.cron-company.company.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.cron-company.company.delete  signatures not supported
** model.account.account.create_chart_account.properties.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.create_chart_account.properties.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.create_chart_account.properties.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.company.company.search  signatures not supported
** model.company.company.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.company.company.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.company.company.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.company.company.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.company.company.create  signatures not supported
** model.company.company.write  signatures not supported
** model.company.company.read  signatures not supported
** model.company.company.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.company.company.copy  signatures not supported
** model.company.company.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.company.company.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.company.company.delete  signatures not supported
** model.webdav.collection.search  signatures not supported
** model.webdav.collection.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.webdav.collection.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.webdav.collection.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.webdav.collection.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.webdav.collection.create  signatures not supported
** model.webdav.collection.write  signatures not supported
** model.webdav.collection.read  signatures not supported
** model.webdav.collection.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.webdav.collection.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.webdav.collection.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.webdav.collection.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.webdav.collection.delete  signatures not supported
** model.ir.translation.export.init.get_language  signatures not supported
** model.ir.translation.export.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.translation.export.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.translation.export.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.translation.export.init.get_module  signatures not supported
** model.account.tax.group.search  signatures not supported
** model.account.tax.group.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.tax.group.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.account.tax.group.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.account.tax.group.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.account.tax.group.create  signatures not supported
** model.account.tax.group.write  signatures not supported
** model.account.tax.group.read  signatures not supported
** model.account.tax.group.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.account.tax.group.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.account.tax.group.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.tax.group.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.tax.group.delete  signatures not supported
** model.ir.action.act_window.search  signatures not supported
** model.ir.action.act_window.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.action.act_window.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.action.act_window.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.action.act_window.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.action.act_window.create  signatures not supported
** model.ir.action.act_window.write  signatures not supported
** model.ir.action.act_window.read  signatures not supported
** model.ir.action.act_window.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.action.act_window.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.action.act_window.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.action.act_window.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.act_window.delete  signatures not supported
** model.ir.cache.search  signatures not supported
** model.ir.cache.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.cache.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.cache.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.cache.create  signatures not supported
** model.ir.cache.write  signatures not supported
** model.ir.cache.read  signatures not supported
** model.ir.cache.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.cache.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.cache.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.cache.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.cache.delete  signatures not supported
** model.account.move.open_reconcile_lines.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.move.open_reconcile_lines.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.move.open_reconcile_lines.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.account.account.create_chart_account.init.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.account.create_chart_account.init.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.account.create_chart_account.init.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.keyword.search  signatures not supported
** model.ir.action.keyword.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.action.keyword.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.action.keyword.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.action.keyword.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.action.keyword.create  signatures not supported
** model.ir.action.keyword.get_keyword  signatures not supported
** model.ir.action.keyword.write  signatures not supported
** model.ir.action.keyword.read  signatures not supported
** model.ir.action.keyword.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.action.keyword.models_get  signatures not supported
** model.ir.action.keyword.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.action.keyword.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.action.keyword.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.action.keyword.delete  signatures not supported
** model.party.category.search  signatures not supported
** model.party.category.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.party.category.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.party.category.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.party.category.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.party.category.create  signatures not supported
** model.party.category.write  signatures not supported
** model.party.category.read  signatures not supported
** model.party.category.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.party.category.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.party.category.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.party.category.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.party.category.delete  signatures not supported
** model.party.party-party.category.search  signatures not supported
** model.party.party-party.category.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.party.party-party.category.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.party.party-party.category.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.party.party-party.category.create  signatures not supported
** model.party.party-party.category.write  signatures not supported
** model.party.party-party.category.read  signatures not supported
** model.party.party-party.category.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.party.party-party.category.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.party.party-party.category.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.party.party-party.category.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.party.party-party.category.delete  signatures not supported
** model.ir.* model.field.search  signatures not supported
** model.ir.* model.field.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.* model.field.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.* model.field.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.* model.field.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.* model.field.create  signatures not supported
** model.ir.* model.field.write  signatures not supported
** model.ir.* model.field.read  signatures not supported
** model.ir.* model.field.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.* model.field.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.* model.field.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.* model.field.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.* model.field.delete  signatures not supported
** model.res.request.link.search  signatures not supported
** model.res.request.link.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.res.request.link.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.res.request.link.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.res.request.link.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.res.request.link.create  signatures not supported
** model.res.request.link.write  signatures not supported
** model.res.request.link.read  signatures not supported
** model.res.request.link.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.res.request.link.models_get  signatures not supported
** model.res.request.link.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.res.request.link.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.res.request.link.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.res.request.link.delete  signatures not supported
** model.ir.* model.search  signatures not supported
** model.ir.* model.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.ir.* model.export_data Return list of list of values for each id in ids.
The list of values follows fields_names.
Relational fields are defined with '/' at any depth.

:param cursor: the database cursor
:param ids: a list of ids
:param fields_names: a list of field names
:param context: the context
:return: a list of list of values for each id in ids signatures not supported
** model.ir.* model.search_read Call search and read functions at once.
Useful for the client to reduce the number of calls.

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param offset: an integer to specify the offset for the result
:param limit: an integer to specify the number of records
:param order: a list of tuples that are constructed like this:
    ('field name', 'DESC|ASC')
    allowing to to specify the order of result
:param context: the context
:param fields_names: fields names to read if None read all fields
:return: a list of dictionaries or a dictionary if limit is 1
    the dictionaries will have field names as key
    and field values as value signatures not supported
** model.ir.* model.import_data Create records for all values in datas.
The field names of values must be defined in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param datas: the data to import
:param context: the context
:return: a tuple with
    - the number of records imported
    - the last values if failed
    - the exception if failed
    - the warning if failed signatures not supported
** model.ir.* model.create  signatures not supported
** model.ir.* model.write  signatures not supported
** model.ir.* model.read  signatures not supported
** model.ir.* model.search_count Return the number of records that match the domain. (See search)

:param cursor: the database cursor
:param user: the user id
:param domain: a domain like in search
:param context: the context
:return: an integer signatures not supported
** model.ir.* model.copy Duplicate the record(s) in ids.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of ids or an id
:param default: a dictionary with field name as keys and
    new value for the field as value
:param context: the context
:return: a list of new ids or the new id signatures not supported
** model.ir.* model.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.ir.* model.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
** model.ir.* model.delete  signatures not supported
** model.account.move.reconcile_lines.writeoff.fields_view_get Return a view definition.

:param cursor: the database cursor
:param user: the user id
:param view_id: the id of the view, if None the first one will be used
:param view_type: the type of the view if view_id is None
:param context: the context
:param toolbar: if True the result will contain a toolbar key with
    keyword action definitions for the view
:param hexmd5: if filled, the function will return True if the result
    has the same md5
:return: a dictionary with keys:
   - model: the model name
   - arch: the xml description of the view
   - fields: a dictionary with the definition of each field in the view
   - toolbar: a dictionary with the keyword action definitions
   - md5: the check sum of the dictionary without this checksum signatures not supported
** model.account.move.reconcile_lines.writeoff.fields_get Return the definition of each field in the object.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of field names or None for all fields
:param context: the context
:return: a dictionary with field name as key and definition as value signatures not supported
** model.account.move.reconcile_lines.writeoff.default_get Return a dict with the default values for each field in fields_names.

:param cursor: the database cursor
:param user: the user id
:param fields_names: a list of fields names
:param context: the context
:param with_rec_name: a boolean to add rec_name value
:return: a dictionary with field name as key
    and default value as value signatures not supported
wizard.ir.module.module.config_wizard.create  signatures not supported
wizard.ir.module.module.config_wizard.execute  signatures not supported
wizard.ir.module.module.config_wizard.delete  signatures not supported
wizard.party.check_vies.create  signatures not supported
wizard.party.check_vies.execute  signatures not supported
wizard.party.check_vies.delete  signatures not supported
wizard.account.move.open_account.create  signatures not supported
wizard.account.move.open_account.execute  signatures not supported
wizard.account.move.open_account.delete  signatures not supported
wizard.account.fiscalyear.close_fiscalyear.create  signatures not supported
wizard.account.fiscalyear.close_fiscalyear.execute  signatures not supported
wizard.account.fiscalyear.close_fiscalyear.delete  signatures not supported
wizard.account.journal.reopen_period.create  signatures not supported
wizard.account.journal.reopen_period.execute  signatures not supported
wizard.account.journal.reopen_period.delete  signatures not supported
wizard.account.period.reopen_period.create  signatures not supported
wizard.account.period.reopen_period.execute  signatures not supported
wizard.account.period.reopen_period.delete  signatures not supported
wizard.account.account.open_income_statement.create  signatures not supported
wizard.account.account.open_income_statement.execute  signatures not supported
wizard.account.account.open_income_statement.delete  signatures not supported
wizard.res.user.config.create  signatures not supported
wizard.res.user.config.execute  signatures not supported
wizard.res.user.config.delete  signatures not supported
wizard.account.account.update_chart_account.create  signatures not supported
wizard.account.account.update_chart_account.execute  signatures not supported
wizard.account.account.update_chart_account.delete  signatures not supported
wizard.ir.translation.set_report.create  signatures not supported
wizard.ir.translation.set_report.execute  signatures not supported
wizard.ir.translation.set_report.delete  signatures not supported
wizard.account.journal.close_period.create  signatures not supported
wizard.account.journal.close_period.execute  signatures not supported
wizard.account.journal.close_period.delete  signatures not supported
wizard.account.move.unreconcile_lines.create  signatures not supported
wizard.account.move.unreconcile_lines.execute  signatures not supported
wizard.account.move.unreconcile_lines.delete  signatures not supported
wizard.account.account.open_third_party_balance.create  signatures not supported
wizard.account.account.open_third_party_balance.execute  signatures not supported
wizard.account.account.open_third_party_balance.delete  signatures not supported
wizard.company.company.config.create  signatures not supported
wizard.company.company.config.execute  signatures not supported
wizard.company.company.config.delete  signatures not supported
wizard.ir.* model.print_model_graph.create  signatures not supported
wizard.ir.* model.print_model_graph.execute  signatures not supported
wizard.ir.* model.print_model_graph.delete  signatures not supported
wizard.account.move.print_general_journal.create  signatures not supported
wizard.account.move.print_general_journal.execute  signatures not supported
wizard.account.move.print_general_journal.delete  signatures not supported
wizard.account.account.open_balance_sheet.create  signatures not supported
wizard.account.account.open_balance_sheet.execute  signatures not supported
wizard.account.account.open_balance_sheet.delete  signatures not supported
wizard.account.move.open_reconcile_lines.create  signatures not supported
wizard.account.move.open_reconcile_lines.execute  signatures not supported
wizard.account.move.open_reconcile_lines.delete  signatures not supported
wizard.ir.translation.clean.create  signatures not supported
wizard.ir.translation.clean.execute  signatures not supported
wizard.ir.translation.clean.delete  signatures not supported
wizard.account.account.open_aged_balance.create  signatures not supported
wizard.account.account.open_aged_balance.execute  signatures not supported
wizard.account.account.open_aged_balance.delete  signatures not supported
wizard.account.account.open_chart_account.create  signatures not supported
wizard.account.account.open_chart_account.execute  signatures not supported
wizard.account.account.open_chart_account.delete  signatures not supported
wizard.ir.module.module.install_upgrade.create  signatures not supported
wizard.ir.module.module.install_upgrade.execute  signatures not supported
wizard.ir.module.module.install_upgrade.delete  signatures not supported
wizard.ir.translation.export.create  signatures not supported
wizard.ir.translation.export.execute  signatures not supported
wizard.ir.translation.export.delete  signatures not supported
wizard.account.move.reconcile_lines.create  signatures not supported
wizard.account.move.reconcile_lines.execute  signatures not supported
wizard.account.move.reconcile_lines.delete  signatures not supported
wizard.account.account.create_chart_account.create  signatures not supported
wizard.account.account.create_chart_account.execute  signatures not supported
wizard.account.account.create_chart_account.delete  signatures not supported
wizard.account.move.open_journal.create  signatures not supported
wizard.account.move.open_journal.execute  signatures not supported
wizard.account.move.open_journal.delete  signatures not supported
wizard.ir.module.module.config.create  signatures not supported
wizard.ir.module.module.config.execute  signatures not supported
wizard.ir.module.module.config.delete  signatures not supported
wizard.account.period.close_period.create  signatures not supported
wizard.account.period.close_period.execute  signatures not supported
wizard.account.period.close_period.delete  signatures not supported
wizard.account.tax.open_code.create  signatures not supported
wizard.account.tax.open_code.execute  signatures not supported
wizard.account.tax.open_code.delete  signatures not supported
wizard.account.account.print_trial_balance.create  signatures not supported
wizard.account.account.print_trial_balance.execute  signatures not supported
wizard.account.account.print_trial_balance.delete  signatures not supported
wizard.ir.translation.update.create  signatures not supported
wizard.ir.translation.update.execute  signatures not supported
wizard.ir.translation.update.delete  signatures not supported
wizard.account.account.print_general_ledger.create  signatures not supported
wizard.account.account.print_general_ledger.execute  signatures not supported
wizard.account.account.print_general_ledger.delete  signatures not supported
wizard.account.tax.open_chart_code.create  signatures not supported
wizard.account.tax.open_chart_code.execute  signatures not supported
wizard.account.tax.open_chart_code.delete  signatures not supported
* Reports
** report.account.account.third_party_balance.execute Execute the report.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of record ids on which execute report
:param datas: a dictionary with datas that will be set in
    local context of the report
:param context: the context
:return: a tuple with:
    report type,
    base64 encoded data,
    a boolean to direct print,
    the report name signatures not supported
** report.account.account.general_ledger.execute Execute the report.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of record ids on which execute report
:param datas: a dictionary with datas that will be set in
    local context of the report
:param context: the context
:return: a tuple with:
    report type,
    base64 encoded data,
    a boolean to direct print,
    the report name signatures not supported
** report.workflow.instance.graph.execute  signatures not supported
** report.ir.model.graph.execute  signatures not supported
** report.party.label.execute Execute the report.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of record ids on which execute report
:param datas: a dictionary with datas that will be set in
    local context of the report
:param context: the context
:return: a tuple with:
    report type,
    base64 encoded data,
    a boolean to direct print,
    the report name signatures not supported
** report.account.move.general_journal.execute Execute the report.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of record ids on which execute report
:param datas: a dictionary with datas that will be set in
    local context of the report
:param context: the context
:return: a tuple with:
    report type,
    base64 encoded data,
    a boolean to direct print,
    the report name signatures not supported
** report.account.account.aged_balance.execute Execute the report.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of record ids on which execute report
:param datas: a dictionary with datas that will be set in
    local context of the report
:param context: the context
:return: a tuple with:
    report type,
    base64 encoded data,
    a boolean to direct print,
    the report name signatures not supported
** report.account.account.trial_balance.execute Execute the report.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of record ids on which execute report
:param datas: a dictionary with datas that will be set in
    local context of the report
:param context: the context
:return: a tuple with:
    report type,
    base64 encoded data,
    a boolean to direct print,
    the report name signatures not supported
report.party.letter.execute Execute the report.

:param cursor: the database cursor
:param user: the user id
:param ids: a list of record ids on which execute report
:param datas: a dictionary with datas that will be set in
    local context of the report
:param context: the context
:return: a tuple with:
    report type,
    base64 encoded data,
    a boolean to direct print,
    the report name signatures not supported
